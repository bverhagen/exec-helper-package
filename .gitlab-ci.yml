image: dock0/arch

variables:
  GIT_SUBMODULE_STRATEGY: recursive     # Let gitlab checkout the submodules before running

stages:
    - build
    - analyze
    - verify

pkgbuild:build:
    image: dock0/arch
    stage: build
    script: 
        - pacman -Sy --noconfirm
        - pacman -S --noconfirm --needed base-devel make
        - echo "nobody ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers                  # Enable sudo to work without prompting a password
        - sudo -u nobody make pkgbuild
    artifacts:
        expire_in: 1 day
        paths:
            - pkgbuild/*.tar.xz

pkgbuild:analyze:
    image: dock0/arch
    stage: analyze
    dependencies:
        - pkgbuild:build
    script:
        - pacman -Sy --noconfirm
        - pacman -S --noconfirm --needed namcap
        - cd pkgbuild
        - namcap PKGBUILD
        - namcap *.tar.xz

pkgbuild:verify:
    image: dock0/arch
    stage: verify
    dependencies:
        - pkgbuild:build
    script:
        - pacman --needed --noconfirm -U pkgbuild/*.tar.xz
        - pacman -S --noconfirm --needed base-devel curl gcc clang make scons clang-tools-extra cppcheck git java-environment unzip wget valgrind
        - bash -x exec-helper/gitlab/install-aur.sh lcov
        - mkdir -p 3rdparty/pmd
        - pushd 3rdparty/pmd && wget --no-check-certificate "https://downloads.sourceforge.net/project/pmd/pmd/5.7.0/pmd-bin-5.7.0.zip" && unzip pmd-bin-5.7.0.zip; popd
        - export PATH=$PATH:$(pwd)/build/g++/release/install/usr/bin:$(pwd)/3rdparty/pmd/pmd-bin-5.7.0/bin
        - export ROOT_DIR=$(pwd)
        - verification/run-examples.sh

dpkg:build:
    image: debian:testing
    stage: build
    script:
        - apt-get update
        - apt-get install --assume-yes debhelper build-essential equivs devscripts sudo
        - echo "nobody ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers                  # Enable sudo to work without prompting a password
        - sudo -u nobody make debian
        - mv ../*.dsc .
        - mv ../*.tar.* .
        - mv ../*.changes .
        - mv ../*.deb .
        - mv ../*.buildinfo .
    artifacts:
        expire_in: 1 day
        paths:
            - "*.dsc"
            - "*.tar.*"
            - "*.changes"
            - "*.deb"
            - "*.buildinfo"

dpkg:analyze:
    image: debian:testing
    stage: analyze
    dependencies:
        - dpkg:build
    script:
        - mv *.dsc *.tar.* *.changes *.deb *.buildinfo ..
        - apt-get update
        - apt-get install --assume-yes lintian
        - lintian --fail-on-warnings

debian-testing:build:
    image: debian:testing
    stage: build
    script:
        - apt-get update
        - apt-get install --assume-yes debhelper build-essential equivs devscripts sudo
        - echo "nobody ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers                  # Enable sudo to work without prompting a password
        - sudo -u nobody make debian
        - mv ../*.dsc .
        - mv ../*.tar.* .
        - mv ../*.changes .
        - mv ../*.deb .
        - mv ../*.buildinfo .
    artifacts:
        expire_in: 1 day
        paths:
            - "*.dsc"
            - "*.tar.*"
            - "*.changes"
            - "*.deb"
            - "*.buildinfo"

debian-testing:analyze:
    image: debian:testing
    stage: analyze
    dependencies:
        - debian-testing:build
    script:
        - mv *.dsc *.tar.* *.changes *.deb *.buildinfo ..
        - apt-get update
        - apt-get install --assume-yes lintian
        - lintian --fail-on-warnings

ubuntu-xenial:build:
    image: ubuntu:xenial
    stage: build
    script:
        - apt-get update
        - apt-get install --assume-yes debhelper build-essential equivs devscripts sudo
        - echo "nobody ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers                  # Enable sudo to work without prompting a password
        - sudo -u nobody make ubuntu
        - mv ../*.dsc .
        - mv ../*.tar.* .
        - mv ../*.changes .
        - mv ../*.deb .
    artifacts:
        expire_in: 1 day
        paths:
            - "*.dsc"
            - "*.tar.*"
            - "*.changes"
            - "*.deb"

ubuntu-xenial:analyze:
    image: ubuntu:xenial
    stage: analyze
    dependencies:
        - ubuntu-xenial:build
    script:
        - mv *.dsc *.tar.* *.changes *.deb ..
        - apt-get update
        - apt-get install --assume-yes lintian
        - lintian --fail-on-warnings
