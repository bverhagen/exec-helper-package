image: bverhagen/pacman-aur-wrapper
variables:
      GIT_SUBMODULE_STRATEGY: recursive

stages:
    - prepare
    - build
    - verify
    - upload

.enable_sudo_nobody: &enable_sudo_nobody
        echo "nobody ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers                  # Enable sudo to work without prompting a password

.install_gitchangelog_arch: &install_gitchangelog_arch
        sudo pacman -Sy --noconfirm --needed python curl libidn2 && sudo sh -c 'curl -sSL https://raw.githubusercontent.com/vaab/gitchangelog/master/src/gitchangelog/gitchangelog.py > /usr/local/bin/gitchangelog' && sudo chmod +x /usr/local/bin/gitchangelog

.install_gitchangelog_debian: &install_gitchangelog_debian
        sudo apt-get --yes install python curl && sudo sh -c 'curl -sSL https://raw.githubusercontent.com/vaab/gitchangelog/master/src/gitchangelog/gitchangelog.py > /usr/local/bin/gitchangelog' && sudo chmod +x /usr/local/bin/gitchangelog

## This activates the use of the configured private keys in a build pipeline.
.enable_private_keys: &enable_private_keys
    ## Install ssh-agent if not already installed
    - 'which ssh-agent || sudo pacman -Sy --noconfirm --needed openssh'
  
    ## Run ssh-agent
    - eval $(ssh-agent -s)
  
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work without extra base64 encoding. (https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556)
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  
    ## Set the user name and and email for git commands
    - git config --global user.email "unknown@unknown.com"
    - git config --global user.name "Gitlab CI Runner"
  
    ## Set known hosts using the configurable SSH_KNOWN_HOSTS variable
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

############################################################################### PKGBUILD #############################################################

.pkgbuild:prepare: &pkgbuild_prepare
    stage: prepare
    variables:
        MAKE_TARGETS: prepare
    script:
        - sudo pacman -Syu --noconfirm --needed
        - sudo pacman -S --noconfirm --needed make sed lsb-release sudo git base-devel lsb-release
        - *install_gitchangelog_arch
        - echo Making targets= ${MAKE_TARGETS}
        - make ${MAKE_TARGETS}
    artifacts:
        expire_in: 1 day
        paths:
            - pkgbuild/build_package/*

.pkgbuild:build: &pkgbuild_build
    stage: build
    variables:
        BUILD_DIR: pkgbuild/build_package
    script: 
        - sudo pacman -Syu --noconfirm --needed
        - sudo pacman -S --noconfirm --needed base-devel sudo lsb-release
        - yay -S --noconfirm --needed rapidcheck microsoft-gsl-git
        - cd $BUILD_DIR
        - makepkg --check --noconfirm --needed --syncdeps --force
    artifacts:
        expire_in: 1 day
        paths:
            - $BUILD_DIR/*.tar.xz

.pkgbuild:analyze: &pkgbuild_analyze
    stage: verify
    variables:
        BUILD_DIR: pkgbuild/build_package
        PACKAGE_DIR: package
    script:
        - sudo pacman -Syu --noconfirm --needed
        - sudo pacman -S --noconfirm --needed yaml-cpp boost-libs gcc-libs namcap make lsb-release
        - make PREFIX=$(pwd)/${PACKAGE_DIR} install
        - namcap ${PACKAGE_DIR}/PKGBUILD
        - namcap ${PACKAGE_DIR}/.SRCINFO
        - namcap ${BUILD_DIR}/*.tar.xz

.pkgbuild:upload: &pkgbuild_upload
    stage: upload
    variables:
        URL: INVALID_URL.git
    before_script:
        *enable_private_keys
    script:
        - echo "Cloning ${URL}..."
        - git clone ${URL} repo
        - rm -rf repo/*
        - sudo pacman -Syu --noconfirm --needed
        - sudo pacman -S --noconfirm --needed make sed lsb-release sudo git lsb-release
        - make PREFIX=$(pwd)/repo install
        - export EXEC_HELPER_HASH=$(git log -n 1 --pretty=format:"%H")
        - git -C repo add .
        - git -C repo diff-index --quiet HEAD -- && echo 'No changes -- skipping commit' || git -C repo commit -m "Updated package to exec-helper commit ${EXEC_HELPER_HASH}"
        - git -C repo push

pkgbuild:prepare:
    <<: *pkgbuild_prepare
    image: bverhagen/pacman-aur-wrapper
    variables:
        MAKE_TARGETS: pkgbuild TARGET=prepare

arch-linux:prepare:
    <<: *pkgbuild_prepare
    image: bverhagen/pacman-aur-wrapper
    only:
        - master

arch-linux-git:prepare:
    <<: *pkgbuild_prepare
    image: bverhagen/pacman-aur-wrapper
    variables:
        MAKE_TARGETS: prepare-git

pkgbuild:build:
    <<: *pkgbuild_build
    image: bverhagen/pacman-aur-wrapper
    dependencies:
        - pkgbuild:prepare

arch-linux:build:
    <<: *pkgbuild_build
    image: bverhagen/pacman-aur-wrapper
    dependencies:
        - arch-linux:prepare
    only:
        - master

arch-linux-git:build:
    <<: *pkgbuild_build
    image: bverhagen/pacman-aur-wrapper
    dependencies:
        - arch-linux-git:prepare

pkgbuild:analyze:
    <<: *pkgbuild_analyze
    image: bverhagen/pacman-aur-wrapper
    dependencies:
        - pkgbuild:prepare
        - pkgbuild:build

arch-linux:analyze:
    <<: *pkgbuild_analyze
    image: bverhagen/pacman-aur-wrapper
    dependencies:
        - arch-linux:prepare
        - arch-linux:build
    only:
        - master

arch-linux-git:analyze:
    <<: *pkgbuild_analyze
    image: bverhagen/pacman-aur-wrapper
    dependencies:
        - arch-linux-git:prepare
        - arch-linux-git:build

arch-linux:upload:
    <<: *pkgbuild_upload
    image: bverhagen/pacman-aur-wrapper
    dependencies:
        - arch-linux:prepare
    variables:
        URL: ssh://aur@aur.archlinux.org/exec-helper.git
    only:
        - master

arch-linux-git:upload:
    <<: *pkgbuild_upload
    image: bverhagen/pacman-aur-wrapper
    dependencies:
        - arch-linux-git:prepare
    variables:
        URL: ssh://aur@aur.archlinux.org/exec-helper-git.git
    only:
        - dev

############################################################################### dpkg  #############################################################

.dpkg:prepare: &dpkg_prepare
    stage: prepare
    variables:
        MAKE_TARGETS: prepare
    script:
        - apt-get update
        - apt-get install --assume-yes sudo make sed lsb-release git gcc xz-utils python-pip
        - pip install mako
        - *install_gitchangelog_debian
        - *enable_sudo_nobody
        - echo Making targets= ${MAKE_TARGETS}
        - sudo -u nobody make ${MAKE_TARGETS}
    artifacts:
        expire_in: 1 day
        paths:
            - dpkg/Makefile
            - dpkg/*.tar.xz

.dpkg:source: &dpkg_source
    stage: build
    variables:
        MAKE_TARGETS: source
        ADDITIONAL_BUILD_DEPENDENCIES: ""
    script:
        - apt-get update
        - apt-get install --assume-yes debhelper build-essential equivs devscripts sudo git lsb-release sed python-pip cmake libboost-program-options-dev libboost-filesystem-dev libboost-log-dev libyaml-cpp-dev libmsgsl-dev doxygen graphviz pkg-config ${ADDITIONAL_BUILD_DEPENDENCIES}
        - pip install mako
        - *install_gitchangelog_debian
        - *enable_sudo_nobody
        - echo "Making targets = ${MAKE_TARGETS}"
        - sudo -u nobody make ${MAKE_TARGETS}
    artifacts:
        expire_in: 1 day
        paths:
            - dpkg/package/source

.dpkg:build: &dpkg_build
    stage: build
    variables:
        MAKE_TARGETS: build
        ADDITIONAL_BUILD_DEPENDENCIES: ""
    script:
        - apt-get update
        - apt-get install --assume-yes debhelper build-essential equivs devscripts sudo git lsb-release sed python-pip cmake libboost-program-options-dev libboost-filesystem-dev libboost-log-dev libyaml-cpp-dev libmsgsl-dev doxygen graphviz pkg-config ${ADDITIONAL_BUILD_DEPENDENCIES}
        - pip install mako
        - *install_gitchangelog_debian
        - *enable_sudo_nobody
        - echo "Making targets = ${MAKE_TARGETS}"
        - sudo -u nobody make ${MAKE_TARGETS}
    artifacts:
        expire_in: 1 day
        paths:
            - dpkg/package/binary

.dpkg:build-test: &dpkg_build_test
    stage: build
    variables:
        MAKE_TARGETS: build-test
        ADDITIONAL_BUILD_DEPENDENCIES: ""
    script:
        - apt-get update
        - apt-get install --assume-yes debhelper build-essential sudo git lsb-release sed python-pip cmake libboost-program-options-dev libboost-filesystem-dev libboost-log-dev libyaml-cpp-dev libmsgsl-dev doxygen graphviz pkg-config ${ADDITIONAL_BUILD_DEPENDENCIES}
        - pip install mako
        - *install_gitchangelog_debian
        - *enable_sudo_nobody
        - echo Making targets= ${MAKE_TARGETS}
        - sudo -u nobody make ${MAKE_TARGETS}
    artifacts:
        expire_in: 1 day
        paths:
            - dpkg/test/package

.dpkg:analyze: &dpkg_analyze
    stage: verify
    variables:
        LINTIAN_ARGS: "--no-cfg"
    script:
        - apt-get update
        - apt-get install --assume-yes lintian
        - pushd dpkg/package/source && lintian ${LINTIAN_ARGS} --allow-root *.dsc *.changes
        - popd
        - pushd dpkg/package/binary && lintian ${LINTIAN_ARGS} --allow-root *.dsc *.changes *.deb
        - popd

.dpkg:verify: &dpkg_verify
    stage: verify
    script:
        - apt-get update
        - dpkg -i dpkg/package/binary/*.deb dpkg/test/package/*.deb || true
        - apt --fix-broken --yes install
        - dpkg -i dpkg/package/binary/*.deb dpkg/test/package/*.deb
        - apt-get --yes install gcc g++ clang make scons clang-tidy cppcheck git valgrind
        - exec-helper-integration-test

dpkg:prepare:
    <<: *dpkg_prepare
    image: debian:testing
    variables:
        MAKE_TARGETS: dpkg TARGET=prepare

debian-testing:prepare:
    <<: *dpkg_prepare
    image: debian:testing

ubuntu-rolling:prepare:
    <<: *dpkg_prepare
    image: ubuntu:rolling

ubuntu-devel:prepare:
    <<: *dpkg_prepare
    image: ubuntu:devel

dpkg:source:
    <<: *dpkg_source
    image: debian:testing
    dependencies:
        - dpkg:prepare
    variables:
        MAKE_TARGETS: dpkg TARGET=source

debian-testing:source:
    <<: *dpkg_source
    image: debian:testing
    dependencies:
        - debian-testing:prepare

ubuntu-rolling:source:
    <<: *dpkg_source
    image: ubuntu:rolling
    dependencies:
        - ubuntu-rolling:prepare

ubuntu-devel:source:
    <<: *dpkg_source
    image: ubuntu:devel
    dependencies:
        - ubuntu-devel:prepare

dpkg:build:
    <<: *dpkg_build
    image: debian:testing
    dependencies:
        - dpkg:prepare
    variables:
        MAKE_TARGETS: dpkg TARGET=build

debian-testing:build:
    <<: *dpkg_build
    image: debian:testing
    dependencies:
        - debian-testing:prepare

ubuntu-rolling:build:
    <<: *dpkg_build
    image: ubuntu:rolling
    dependencies:
        - ubuntu-rolling:prepare

ubuntu-devel:build:
    <<: *dpkg_build
    image: ubuntu:devel
    dependencies:
        - ubuntu-devel:prepare

dpkg:build-test:
    <<: *dpkg_build_test
    image: debian:testing
    dependencies: []
    variables:
        MAKE_TARGETS: dpkg TARGET=build-test

debian-testing:build-test:
    <<: *dpkg_build_test
    image: debian:testing
    dependencies: []
    variables:
        MAKE_TARGETS: dpkg TARGET=build-test

ubuntu-rolling:build-test:
    <<: *dpkg_build_test
    image: ubuntu:rolling
    dependencies: []

ubuntu-devel:build-test:
    <<: *dpkg_build_test
    image: ubuntu:devel
    dependencies: []

dpkg:analyze:
    <<: *dpkg_analyze
    image: debian:testing
    dependencies:
        - dpkg:prepare
        - dpkg:source
        - dpkg:build

debian-testing:analyze:
    <<: *dpkg_analyze
    image: debian:testing
    dependencies:
        - debian-testing:prepare
        - debian-testing:source
        - debian-testing:build

ubuntu-rolling:analyze:
    <<: *dpkg_analyze
    image: ubuntu:rolling
    dependencies:
        - ubuntu-rolling:prepare
        - ubuntu-rolling:source
        - ubuntu-rolling:build

ubuntu-devel:analyze:
    <<: *dpkg_analyze
    image: ubuntu:devel
    dependencies:
        - ubuntu-devel:prepare
        - ubuntu-devel:source
        - ubuntu-devel:build

dpkg:verify:
    <<: *dpkg_verify
    image: debian:testing
    dependencies:
        - dpkg:build
        - dpkg:build-test

debian-testing:verify:
    <<: *dpkg_verify
    image: debian:testing
    dependencies:
        - debian-testing:build
        - debian-testing:build-test

ubuntu-rolling:verify:
    <<: *dpkg_verify
    image: ubuntu:rolling
    dependencies:
        - ubuntu-rolling:build
        - ubuntu-rolling:build-test

ubuntu-devel:verify:
    <<: *dpkg_verify
    image: ubuntu:devel
    dependencies:
        - ubuntu-devel:build
        - ubuntu-devel:build-test

############################################################################### containers  #############################################################
trigger-docker-cloud:
    image: pstauffer/curl
    stage: upload
    script:
        - curl --request POST ${DOCKER_CLOUD_BUILD_TRIGGER}
    only:
        - master
